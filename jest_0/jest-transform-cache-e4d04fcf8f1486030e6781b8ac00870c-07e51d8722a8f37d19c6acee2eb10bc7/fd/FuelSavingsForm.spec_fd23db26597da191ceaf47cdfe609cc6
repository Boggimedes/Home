'use strict';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _enzyme = require('enzyme');
var _FuelSavingsForm = require('./FuelSavingsForm');var _FuelSavingsForm2 = _interopRequireDefault(_FuelSavingsForm);
var _FuelSavingsTextInput = require('./FuelSavingsTextInput');var _FuelSavingsTextInput2 = _interopRequireDefault(_FuelSavingsTextInput);
var _FuelSavingsResults = require('./FuelSavingsResults');var _FuelSavingsResults2 = _interopRequireDefault(_FuelSavingsResults);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('<FuelSavingsForm />', function () {
  it('should contain <FuelSavingsTextInput /> components', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));

    var allInputs = wrapper.find(_FuelSavingsTextInput2.default);

    expect(allInputs.length).toEqual(5);
    expect(allInputs.at(0).props().name).toEqual('newMpg');
    expect(allInputs.at(0).props().value).toEqual(fuelSavings.newMpg);
    expect(allInputs.at(1).props().name).toEqual('tradeMpg');
    expect(allInputs.at(1).props().value).toEqual(fuelSavings.tradeMpg);
    expect(allInputs.at(2).props().name).toEqual('newPpg');
    expect(allInputs.at(2).props().value).toEqual(fuelSavings.newPpg);
    expect(allInputs.at(3).props().name).toEqual('tradePpg');
    expect(allInputs.at(3).props().value).toEqual(fuelSavings.tradePpg);
    expect(allInputs.at(4).props().name).toEqual('milesDriven');
    expect(allInputs.at(4).props().value).toEqual(fuelSavings.milesDriven);
  });

  it('should contain options to change miles driven timeframe', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));

    var expectedOption1 = '<option value="week">Week</option>';
    var expectedOption2 = '<option value="month">Month</option>';
    var expectedOption3 = '<option value="year">Year</option>';

    expect(wrapper.find('select').childAt(0).html()).toEqual(expectedOption1);
    expect(wrapper.find('select').childAt(1).html()).toEqual(expectedOption2);
    expect(wrapper.find('select').childAt(2).html()).toEqual(expectedOption3);
  });

  it('should contain <FuelSavingsResults /> when necessary conditions are met', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: true,
      savings: {
        monthly: 10,
        annual: 120,
        threeYear: 360 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));

    var expected = _react2.default.createElement(_FuelSavingsResults2.default, { savings: fuelSavings.savings });

    expect(wrapper.contains(expected)).toBeTruthy();
  });

  it('should not contain <FuelSavingsResults /> when necessary conditions are not met', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));

    var expected = _react2.default.createElement(_FuelSavingsResults2.default, { savings: fuelSavings.savings });

    expect(wrapper.contains(expected)).toBeFalsy();
  });

  it('should handle form submit', function () {
    var saveFuelSavings = jest.fn();
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));


    expect(saveFuelSavings).not.toBeCalled();
    wrapper.find('input[type="submit"]').simulate('click');
    expect(saveFuelSavings).toBeCalled();
  });

  it('should submit appState', function () {
    var saveFuelSavings = jest.fn();
    var calculateFuelSavings = function calculateFuelSavings() {
    };
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));


    wrapper.find('input[type="submit"]').simulate('click');
    expect(saveFuelSavings).toBeCalledWith(fuelSavings);
  });


  it('should calculate fuel savings on text input change', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = jest.fn();
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));


    expect(calculateFuelSavings).not.toBeCalled();
    wrapper.find(_FuelSavingsTextInput2.default).first().simulate('change');
    expect(calculateFuelSavings).toBeCalled();
  });

  it('should calculate fuel savings on miles driven timeframe change', function () {
    var saveFuelSavings = function saveFuelSavings() {
    };
    var calculateFuelSavings = jest.fn();
    var fuelSavings = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'week',
      displayResults: false,
      dateModified: null,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: {
        monthly: 0,
        annual: 0,
        threeYear: 0 } };



    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_FuelSavingsForm2.default, {
      saveFuelSavings: saveFuelSavings,
      calculateFuelSavings: calculateFuelSavings,
      fuelSavings: fuelSavings }));


    expect(calculateFuelSavings).not.toBeCalled();
    wrapper.find('select').simulate('change', { target: { value: 'year' } });
    expect(calculateFuelSavings).toBeCalledWith(fuelSavings, 'milesDrivenTimeframe', 'year');
  });
});